# The actualizer turns a parse tree into CSS and Javascript
# So named because it makes Fashion *actually* do something
window.fashion.$actualizer = 

	# Generate a whole new document
	actualize: (parseTree) ->

		# Helper variables
		rM = $wf.$runtimeMode
		$wfa = $wf.$actualizer

		#
		# STAGE 1: Slice and dice the selectors so they all end up in the correct place
		# ----------------------------------------------------------------------------------
		#

		# Separate transitions out into their own properties
		$wfa.separateTransitions parseTree

		# Split the selectors based on whether or not they need to be 'individualized'
		{cssSels, individualSels} = $wfa.splitIndividual parseTree.selectors

		# Add CSS selectors to hide the individual properties
		$wfa.hideIndividualizedSelectors cssSels, parseTree.scripts, individualSels
		
		# Javascript doesn't need to know about static blocks, so they are filtered out here
		jsSels = $wfa.filterStatic cssSels

		#
		# STAGE 2: Generate a runtime data object with variables, selectors, modules & code
		# ----------------------------------------------------------------------------------
		#

		# Generate a runtime data object containing everything the Javascript will need
		runtimeData = $wfa.generateRuntimeData parseTree, jsSels, individualSels

		# Add bindings (selector dependents) for globals and functions to the runtime data
		$wfa.addBindings runtimeData, jsSels, individualSels

		# Figure out what core runtime modules will be needed in the Javascript
		$wfa.autoAddRequirements runtimeData, parseTree, parseTree.selectors

		# Expand those modules into a full set of runtime functions in the runtimeData
		$wfa.addRuntimeFunctions runtimeData, parseTree

		# Remove unnecessary module fields from the runtime data (keeps stuff clean)
		$wfa.removeUnnecessaryModuleData runtimeData

		# Dispatch an event once the full fashion page load is complete
		parseTree.scripts.push "document.dispatchEvent(new Event('#{$wf.readyEvent}'));"

		#
		# STAGE 3: Generate output code in CSS and JS given the selectors and runtime data
		# ----------------------------------------------------------------------------------
		#
		
		# Create the CSS file as a string
		css = $wf.styleHeader + $wfa.createCSS runtimeData, cssSels

		# Convert the runtime data into a more compressed format for transport
		miniRuntimeData = $wfa.minifier.runtimeData runtimeData

		# Create the JS file as a string
		js = $wfa.createJS runtimeData, miniRuntimeData, parseTree.scripts

		#
		# ----------------------------------------------------------------------------------
		#

		# Return two strings, one for JS and one for CSS
		return {css: css, js: js}


# Header added to Javascript Files
window.fashion.$actualizer.jsHeader =
	"""
	/*\\
	|*| GENERATED BY FASHION #{$wf.version}
	|*| #{$wf.url} - #{$wf.author}
	\\*/
	"""


# Combine all the pieces into one nice JS file
window.fashion.$actualizer.createJS = (runtimeData, minifiedData, scripts) ->
	"""
	#{window.fashion.$actualizer.jsHeader}
	window.#{$wf.minifiedObject} = #{$wf.$stringify minifiedData};
	window.#{$wf.runtimeObject} = #{$wf.$stringify {
		config: runtimeData.config,
		modules: runtimeData.modules,
		runtime: runtimeData.runtime,
		selectors: {}, individual: {}, variables: {}
	}};
	FSEXPAND = #{$wf.$stringify $wf.$actualizer.minifier.expandRuntimeData};
	FSEXPAND(window.#{$wf.minifiedObject},window.#{$wf.runtimeObject});
	FSREADY = function(r){d=document;c="complete";
		if(d.readyState==c)r()
		else d.addEventListener('readystatechange',function(){if(d.readyState==c)r()})
	}
	#{scripts.join('\n')}
	"""


# Other pieces of the actualizer
# @prepros-append ./selectors.coffee
# @prepros-append ./bindings.coffee
# @prepros-append ./runtime-data.coffee
# @prepros-append ./create-css.coffee
# @prepros-append ./requires.coffee
# @prepros-append ./load-hider.coffee
# @prepros-append ./minifier/runtime-data.coffee

